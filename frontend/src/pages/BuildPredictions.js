import React, { useState, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import {
  Box,
  Paper,
  Typography,
  Grid,
  TextField,
  Button,
  CircularProgress,
  Alert,
  List,
  ListItem,
  ListItemText,
  Divider,
} from '@mui/material';
import { DataGrid } from '@mui/x-data-grid';
import { fetchBuildPredictions, predictBuildSuccess } from '../features/buildPredictions/buildPredictionsSlice';

const columns = [
  { field: 'id', headerName: 'Build ID', width: 130 },
  { field: 'probability', headerName: 'Success Probability', width: 180 },
  { field: 'estimatedTime', headerName: 'Estimated Time (min)', width: 180 },
  { field: 'riskLevel', headerName: 'Risk Level', width: 130 },
  { field: 'timestamp', headerName: 'Prediction Time', width: 180 },
];

function BuildPredictions() {
  const dispatch = useDispatch();
  const { predictions, history, loading, error, currentPrediction } = useSelector(
    (state) => state.buildPredictions
  );
  
  const [formData, setFormData] = useState({
    repositoryUrl: '',
    branch: 'main',
    commitHash: '',
  });

  useEffect(() => {
    dispatch(fetchBuildPredictions());
  }, [dispatch]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    dispatch(predictBuildSuccess({
      id: Math.floor(Math.random() * 1000), // In a real app, this would be generated by the backend
      repositoryUrl: formData.repositoryUrl,
      branch: formData.branch,
      commitHash: formData.commitHash,
    }));
  };

  const getRiskLevel = (probability) => {
    const prob = probability / 100; // Convert to decimal
    if (prob >= 0.8) return 'Low';
    if (prob >= 0.6) return 'Medium';
    return 'High';
  };

  // Transform history items for DataGrid
  const historyRows = history.map((item) => ({
    id: item.buildId,
    probability: `${item.successProbability.toFixed(1)}%`,
    estimatedTime: (item.estimatedBuildTime / 60).toFixed(1), // Convert seconds to minutes
    riskLevel: getRiskLevel(item.successProbability),
    timestamp: new Date().toLocaleString(),
  }));

  return (
    <Box>
      <Typography variant="h4" gutterBottom>
        Build Predictions
      </Typography>

      <Grid container spacing={3}>
        {/* Prediction Form */}
        <Grid item xs={12} md={6}>
          <Paper sx={{ p: 2 }}>
            <Typography variant="h6" gutterBottom>
              Get Build Prediction
            </Typography>
            <form onSubmit={handleSubmit}>
              <TextField
                fullWidth
                label="Repository URL"
                variant="outlined"
                margin="normal"
                value={formData.repositoryUrl}
                onChange={(e) =>
                  setFormData({ ...formData, repositoryUrl: e.target.value })
                }
                required
              />
              <TextField
                fullWidth
                label="Branch"
                variant="outlined"
                margin="normal"
                value={formData.branch}
                onChange={(e) =>
                  setFormData({ ...formData, branch: e.target.value })
                }
                required
              />
              <TextField
                fullWidth
                label="Commit Hash"
                variant="outlined"
                margin="normal"
                value={formData.commitHash}
                onChange={(e) =>
                  setFormData({ ...formData, commitHash: e.target.value })
                }
                required
              />
              <Button
                type="submit"
                variant="contained"
                color="primary"
                disabled={loading}
                sx={{ mt: 2 }}
              >
                {loading ? <CircularProgress size={24} /> : 'Get Prediction'}
              </Button>
            </form>
            {error && (
              <Alert severity="error" sx={{ mt: 2 }}>
                {error}
              </Alert>
            )}
          </Paper>
        </Grid>

        {/* Current Prediction */}
        <Grid item xs={12} md={6}>
          <Paper sx={{ p: 2 }}>
            <Typography variant="h6" gutterBottom>
              Current Prediction
            </Typography>
            {currentPrediction ? (
              <Box>
                <Typography variant="h5" color="primary" gutterBottom>
                  Success Probability: {currentPrediction.successProbability.toFixed(1)}%
                </Typography>
                <Typography variant="body1" gutterBottom>
                  Estimated Build Time: {(currentPrediction.estimatedBuildTime / 60).toFixed(1)} minutes
                </Typography>
                <Typography variant="h6" sx={{ mt: 2 }}>
                  Risk Factors:
                </Typography>
                <List dense>
                  {currentPrediction.riskFactors.map((factor, index) => (
                    <ListItem key={index}>
                      <ListItemText
                        primary={`${factor.name}: ${factor.value.toFixed(1)}`}
                      />
                    </ListItem>
                  ))}
                </List>
                <Divider sx={{ my: 2 }} />
                <Typography variant="h6">
                  Recommendations:
                </Typography>
                <List dense>
                  {currentPrediction.recommendations.map((rec, index) => (
                    <ListItem key={index}>
                      <ListItemText primary={rec} />
                    </ListItem>
                  ))}
                </List>
              </Box>
            ) : (
              <Typography variant="body1" color="text.secondary">
                No current prediction. Submit the form to get a prediction.
              </Typography>
            )}
          </Paper>
        </Grid>

        {/* Prediction History */}
        <Grid item xs={12}>
          <Paper sx={{ p: 2 }}>
            <Typography variant="h6" gutterBottom>
              Prediction History
            </Typography>
            <div style={{ height: 400, width: '100%' }}>
              <DataGrid
                rows={historyRows}
                columns={columns}
                pageSize={5}
                rowsPerPageOptions={[5]}
                disableSelectionOnClick
              />
            </div>
          </Paper>
        </Grid>
      </Grid>
    </Box>
  );
}

export default BuildPredictions;
